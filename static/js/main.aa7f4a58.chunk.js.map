{"version":3,"sources":["components/stock_table_row.js","components/portfolio_card.js","components/spms.js","App.js","serviceWorker.js","components/new_portfolio.js","components/new_stock.js","components/view_graph.js","index.js"],"names":["StockTableRow","props","state","currency_exchange_rate","pf_index","index","portfolios","JSON","parse","localStorage","getItem","selected_portfolio","console","log","stocks","splice","setItem","stringify","window","location","reload","stockRow","this","pfindex","stocklist","selected_currency","sel_cur","exch_rate","portfolio_total_value","length","map","stock","key","stock_symbol","stock_value","toFixed","share_numbers","Button","variant","size","onClick","e","confirm","handleRowDeleteChange","i","parseFloat","Table","striped","bordered","hover","style","marginTop","Component","PortfolioCard","push","setState","url","axios","get","then","res","data","catch","error","event","sca","target","value","document","href","pf_cards","portfolio","Col","md","Card","Body","Title","portfolio_name","Row","span","offset","type","name","onChange","onCurrencyChange","checked","marginLeft","onAddStock","onViewGraph","onPortfolioDelete","SPMS","className","component","Link","disabled","Badge","hidden","App","Boolean","hostname","match","NewPortfolio","handleChange","input","handleClick","protfolio","history","bind","NewStock","preventDefault","portfolio_index","params","term","stock_price","_","flattenDeep","Array","from","symbol","price","volume","timestamp","ViewGraph","today","Date","getFullYear","getMonth","getDate","start_date","end_date","selected_stocks","handleDateChange","handleButtonClick","handleCheckboxChange","temp_stocks","datasets","stocksymbol","valuation","dates","values","element_datasets","label","backgroundColor","Math","random","toString","labels","alert","selected_stock_symbol","arr_index","indexOf","stockCheckboxes","includes","options","responsive","routing","exact","path","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa7f4a58.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Table } from 'react-bootstrap';\r\n\r\n// This is class for making list of stocks as table in one portfolio\r\nexport default class StockTableRow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currency_exchange_rate : 1\r\n    }\r\n  }\r\n\r\n  // Controlling event for deleting one stock\r\n  handleRowDeleteChange(pf_index, index) {\r\n    const portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    const selected_portfolio = portfolios[pf_index];\r\n    console.log(selected_portfolio);\r\n    const stocks = selected_portfolio.stocks;\r\n    stocks.splice(index, 1);\r\n    localStorage.setItem('portfolios', JSON.stringify(portfolios));\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    var stockRow = <tr></tr>\r\n    const pf_index = this.props.pfindex;\r\n    const stocks = this.props.stocklist;\r\n    const selected_currency = this.props.sel_cur;\r\n    const exch_rate = this.props.exch_rate;\r\n    let portfolio_total_value = 0;\r\n\r\n    if (stocks.length !== 0) {\r\n      // Making list of stocks as table format\r\n      stockRow = stocks.map((stock, index) =>\r\n        <tr key={index}>\r\n          <td>{index + 1}</td>\r\n          <td>{stock.stock_symbol}</td>\r\n          <td>{selected_currency === 'dollar' ? '$' + stock.stock_value : (stock.stock_value*exch_rate).toFixed(4) + '€'}</td>\r\n          <td>{stock.share_numbers}</td>\r\n          <td>{selected_currency === 'dollar' ? '$' + stock.stock_value*stock.share_numbers : (stock.stock_value*exch_rate*stock.share_numbers).toFixed(4) + '€'}</td>\r\n          <td><Button variant=\"outline-dark\" size=\"sm\" onClick={(e) => {if(window.confirm('Delete this stock?')){this.handleRowDeleteChange(pf_index, index, e)};}}>x</Button></td>\r\n        </tr>\r\n      );\r\n      // Getting total value of one portfolio\r\n      for (var i=0; i<stocks.length; i++) {\r\n        portfolio_total_value = portfolio_total_value + parseFloat(stocks[i].stock_value);\r\n      }\r\n    }\r\n    // Rendering stockRow component that is made above.\r\n    return(\r\n      <div>\r\n      <Table striped bordered hover style={{marginTop:'10px'}}>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Stock Symbol</th>\r\n            <th>Stock Value</th>\r\n            <th>Stock Quantity</th>\r\n            <th>Total Value</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {stockRow}\r\n        </tbody>\r\n      </Table>\r\n      <h6>Total value of portfolio : {selected_currency === 'dollar' ? portfolio_total_value + '$' : (portfolio_total_value*exch_rate).toFixed(4) + '€'}</h6>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button, Card, Row, Col } from 'react-bootstrap';\r\nimport StockTableRow from './stock_table_row.js';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n// This is class for showing detail information of portfolio\r\nexport default class PortfolioCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        selected_currency : [],\r\n        currency_exchange_rate : 1,\r\n        portfolios : [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Getting portfolios\r\n    var portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    // Checking error\r\n    if (portfolios == null) {\r\n      portfolios = [];\r\n    } else {\r\n      for(var i=0; i<portfolios.length; i++) {\r\n        // Initial setting of currency radio button\r\n        this.state.selected_currency.push('dollar');\r\n      }\r\n    }\r\n    this.setState({\r\n      portfolios : portfolios\r\n    });\r\n\r\n    const key = 'LRDFD06EG22S6C5F'; // The key for alphavantage service\r\n    const url = `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=${key}`;  // The url for alphavantage service\r\n    // Fetching currency exchang rate data from above url\r\n    axios.get(url)\r\n    .then(res => {\r\n      // console.log(res.data);\r\n      let currency_exchange_rate = res.data['Realtime Currency Exchange Rate']['5. Exchange Rate'];\r\n      this.setState({\r\n        currency_exchange_rate : currency_exchange_rate\r\n      });\r\n    })\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  // Controlling event for selecting currency\r\n  onCurrencyChange(index, event) {\r\n    let sca = this.state.selected_currency;\r\n    sca[index] = event.target.value;\r\n    this.setState({\r\n      selected_currency : sca,\r\n    });\r\n  }\r\n\r\n  // Controlling event for deleting portfolio\r\n  onPortfolioDelete(index) {\r\n    const portfolios = this.state.portfolios;\r\n    const new_pfs = portfolios.splice(index, 1);\r\n    localStorage.setItem('portfolios', JSON.stringify(portfolios));\r\n    window.location.reload();\r\n  }\r\n\r\n  // Redirect for adding stock\r\n  onAddStock(index) {\r\n    document.location.href = '/stock/add/' + index;\r\n  }\r\n\r\n  // Showing graph on selected portfolio\r\n  onViewGraph(index) {\r\n    document.location.href = '/stock/viewgraph/' + index;\r\n  }\r\n\r\n  render() {\r\n    const portfolios = this.state.portfolios;\r\n    const selected_currency = this.state.selected_currency;\r\n    const currency_exchange_rate = this.state.currency_exchange_rate;\r\n\r\n    var pf_cards = <span>There is no portfolio for displaying.</span>\r\n    // Making list of portfolios\r\n    if (portfolios.length !== 0) {\r\n      pf_cards = portfolios.map((portfolio, index) =>\r\n      <Col md={6} key={index} style={{marginTop: '20px'}}>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>{portfolio.portfolio_name}</Card.Title>\r\n            <Row style={{marginTop:'10px'}}>\r\n              <Col md={{ span: 7, offset: 1 }}>\r\n                <input type=\"radio\" name={portfolio.portfolio_name} value=\"dollar\" onChange={(e) => this.onCurrencyChange(index, e)} checked={this.state.selected_currency[index] === \"dollar\"}/>Dollar\r\n                <input type=\"radio\" name={portfolio.portfolio_name} value=\"euro\" onChange={(e) => this.onCurrencyChange(index, e)} checked={this.state.selected_currency[index] === \"euro\"} style={{marginLeft:'20px'}}/>Euro\r\n              </Col>\r\n            </Row>\r\n            <StockTableRow pfindex={index} stocklist={portfolio.stocks} sel_cur={selected_currency[index]} exch_rate={currency_exchange_rate}/>\r\n            <Row style={{marginTop:'20px'}}>\r\n              <Col md={{ span: 2, offset:1 }}>\r\n                <Button variant=\"outline-primary\" size=\"sm\" onClick={(e) => this.onAddStock(index, e)}>Add Stock</Button>\r\n              </Col>\r\n              <Col md={{ span: 2 }}>\r\n                <Button variant=\"outline-primary\" size=\"sm\" onClick={(e) => this.onViewGraph(index, e)}>View Graph</Button>\r\n              </Col>\r\n              <Col md={{ span: 3, offset: 4 }}>\r\n                <Button variant=\"outline-danger\" onClick={(e) => this.onPortfolioDelete(index, e)}>Delete</Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    )};\r\n\r\n    return(\r\n      <Row style={{marginTop: '20px'}}>\r\n        {pf_cards}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Button, Badge } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport PortfolioCard from './portfolio_card.js'\r\n\r\nclass SPMS extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      portfolios : [],\r\n    };\r\n    console.log(\"SPMS initialized\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    const portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    // Getting portfolios in localstorage of browser.\r\n    this.setState({\r\n      portfolios : portfolios\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var portfolios = this.state.portfolios;\r\n    // Checking error during getting portfolios.\r\n    if (portfolios == null) {\r\n      portfolios = [];\r\n    }\r\n    \t// This button is one for adding new portfolio. And this is component for showing details of portfolio.\r\n    return (\r\n      <div className=\"container-div\">\r\n        <Button variant=\"primary\" component={Link} href='/portfolio/add' disabled={portfolios.length === 10? true:false}>Add new portfolio</Button>\r\n        <Badge variant=\"warning\" hidden={portfolios.length !==10 ? true:false}>The maximum number of portfolios that can be crated is 10!</Badge>\r\n        <PortfolioCard/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SPMS;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SPMS from './components/spms';\r\n\r\nfunction App() {\r\n  console.log(\"App is loading\");\r\n  return (\r\n    <SPMS />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\n// This is class for NewPortfolio component in index.js file.\r\nexport default class NewPortfolio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      portfolio_name : ''\r\n    };\r\n\r\n    // Binding functions\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const input = event.target;\r\n    const value = input.value;\r\n    this.setState({ [input.name]: value });\r\n  }\r\n\r\n  // This is the function for retrieving event of pressing <Add Portfolio> button\r\n  handleClick = () => {\r\n    // Getting portfolios\r\n    var portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    // Checking error\r\n    if (portfolios == null) {\r\n      portfolios = [];\r\n    }\r\n    const portfolio_name = this.state.portfolio_name;\r\n    const stocks = [];\r\n    const protfolio = {\r\n      portfolio_name : portfolio_name,\r\n      stocks : stocks,\r\n    }\r\n    // Adding new portfolio to existing array of portfolios\r\n    portfolios.push(protfolio);\r\n    // Setting data of portfolios into localstorage\r\n    localStorage.setItem('portfolios', JSON.stringify(portfolios));\r\n    // Redirect to home and showing result of adding\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"container-div\">\r\n        <label>\r\n          <h5>Portfolio Name : </h5><input className=\"form-control\" name=\"portfolio_name\" onChange={this.handleChange}/>\r\n        </label>\r\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleClick} >Add Portfolio</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n// This is class for NewPortfolio component in index.js file.\r\nexport default class NewStock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      stock_symbol : '',\r\n      share_numbers : 0,\r\n    }\r\n\r\n    // Binding functions\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  // Controlling event of form inputs\r\n  handleChange = (event) => {\r\n    const input = event.target;\r\n    const value = input.value;\r\n    this.setState({ [input.name] : value });\r\n  }\r\n\r\n  //Controlling event of pressing <Add Stock> button\r\n  handleClick = (e) => {\r\n    if(e) e.preventDefault();\r\n\r\n    // Getting parameter from url.\r\n    const { params } = this.props.match;\r\n    const portfolio_index = params.index;\r\n\r\n    // Getting list of portfolios from localstorage\r\n    var portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    var portfolio = portfolios[portfolio_index];\r\n\r\n    let term = this.state.stock_symbol;\r\n\r\n    const key = 'LRDFD06EG22S6C5F';   // The key for alphavantage service\r\n    const url = `https://www.alphavantage.co/query?function=BATCH_STOCK_QUOTES&symbols=${term}&apikey=${key}`; // The url for alphavantage service\r\n    // Fetching data from above url\r\n    axios.get(url)\r\n    .then(res => {\r\n      // console.log(res.data);\r\n      let stocks_response = _.flattenDeep( Array.from(res.data['Stock Quotes']).map((stock) => [{symbol: stock['1. symbol'], price: stock['2. price'], volume: stock['3. volume'], timestamp: stock['4. timestamp']}]) );\r\n      let stock_price = stocks_response[0].price;\r\n      // Making data stock as json format and adding it to portfolio\r\n      const stock = {\r\n        stock_symbol : this.state.stock_symbol,\r\n        stock_value : stock_price,\r\n        share_numbers : this.state.share_numbers,\r\n      }\r\n      portfolio.stocks.push(stock);\r\n      // Saving updated information of portfolio.\r\n      localStorage.setItem('portfolios', JSON.stringify(portfolios));\r\n      // Redirecting\r\n      this.props.history.push('/');\r\n    })\r\n    .catch(error => console.log(error));\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"container-div\">\r\n        <h4></h4>\r\n        <div>\r\n          <label>\r\n            <h5>Stock Symbol : </h5><input type=\"text\" className=\"form-control\" name=\"stock_symbol\" onChange={this.handleChange}/>\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label>\r\n            <h5>Total number of shares : </h5><input type=\"number\" className=\"form-control\" name=\"share_numbers\" onChange={this.handleChange}/>\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\" onClick={this.handleClick} >Add Stock</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Row, Col, Badge, Button } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\n// This is class for showing graph of selected portfolio\r\nexport default class ViewGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Getting date of today\r\n    var today = new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate();\r\n    this.state = {\r\n      data:{},\r\n      start_date : today,\r\n      end_date : today,\r\n      selected_stocks : [],\r\n      portfolios : []\r\n    }\r\n    // Binding functions\r\n    this.handleDateChange = this.handleDateChange.bind(this);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Getting parameters from url\r\n    const { params } = this.props.match;\r\n    const portfolio_index = params.index;\r\n\r\n    // Getting list of portfolios from localstorage\r\n    var portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n    if (portfolios == null) {\r\n      portfolios = [];\r\n    } else {\r\n      var temp_stocks = portfolios[portfolio_index].stocks;\r\n      if (temp_stocks.length !== 0) {\r\n        for (var i=0; i<temp_stocks.length; i++) {\r\n          // getting list of selected stocks in one portfolio\r\n          this.state.selected_stocks.push(temp_stocks[i].stock_symbol);\r\n        }\r\n      }\r\n    }\r\n    this.setState({\r\n      portfolios : portfolios\r\n    });\r\n\r\n    const key = 'LRDFD06EG22S6C5F';  //Api key\r\n    let selected_stocks = this.state.selected_stocks;\r\n    let datasets = [];\r\n    // Getting time series data on each selected stock from serivce\r\n    for (var i=0; i<selected_stocks.length; i++) {\r\n      const stocksymbol = selected_stocks[i]\r\n      const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stocksymbol}&apikey=${key}`;\r\n      axios.get(url)\r\n      .then(res => {\r\n        const valuation = res.data['Time Series (Daily)'];\r\n        let dates = [];\r\n        let values = [];\r\n        for(let key in valuation) {\r\n          dates.push(key);\r\n          values.push(valuation[key]['4. close']);\r\n        }\r\n\r\n        // Making graph data for each graph of selectd stock\r\n        let element_datasets = {\r\n          label : stocksymbol,\r\n          data : values,\r\n          backgroundColor : '#'+(Math.random()*0xFFFFFF<<0).toString(16) + \"33\"\r\n        }\r\n\r\n        datasets.push(element_datasets);\r\n\r\n        // Updating state for drawing graph\r\n        this.setState({\r\n          data : {\r\n            labels : dates,\r\n            datasets : datasets\r\n          }\r\n        });\r\n      })\r\n      .catch(error => console.log(error));\r\n    }\r\n  }\r\n\r\n  // Controlling event for changing start date and end date in graph window\r\n  handleDateChange(event) {\r\n    const input = event.target;\r\n\r\n    const today = new Date().getFullYear()+'-'+(new Date().getMonth()+1)+'-'+new Date().getDate();\r\n    var start_date = this.state.start_date;\r\n    var end_date = this.state.end_date;\r\n    if (input.name === 'start_date') {\r\n      start_date = input.value;\r\n    } else if (input.name === 'end_date') {\r\n      end_date = input.value;\r\n    }\r\n    // Checking error related with inserting date\r\n    if (start_date > end_date) {\r\n      alert(\"Start date is bigger than end date\");\r\n    } else if ((start_date > today) || (end_date > today)) {\r\n      alert(\"Start date or End date is bigger than today\");\r\n    } else {\r\n      this.setState({\r\n        [event.target.name] : event.target.value\r\n      });\r\n    }\r\n  }\r\n  // Controlling event for selecting stocks that must be displayed on graph\r\n  handleCheckboxChange(event) {\r\n    let selected_stocks = this.state.selected_stocks;\r\n    let selected_stock_symbol = event.target.value;\r\n\r\n    if (event.target.checked) {\r\n      selected_stocks.push(selected_stock_symbol);\r\n    } else {\r\n      let arr_index = selected_stocks.indexOf(selected_stock_symbol);\r\n      selected_stocks.splice(arr_index, 1);\r\n    }\r\n    this.setState({\r\n      selected_stocks : selected_stocks\r\n    });\r\n    console.log(this.state.selected_stocks);\r\n  }\r\n\r\n  // Controlling event for pressing Update View button.\r\n  // When pressing this button, graphs are redrawed with updated data\r\n  handleButtonClick() {\r\n    const key = 'LRDFD06EG22S6C5F';\r\n    let selected_stocks = this.state.selected_stocks;\r\n\r\n    let start_date = this.state.start_date;\r\n    let end_date = this.state.end_date;\r\n\r\n    let datasets = [];\r\n    // When press button, this fetch data with updated data on each selected stocks from api\r\n    for (var i=0; i<selected_stocks.length; i++) {\r\n      const stocksymbol = selected_stocks[i]\r\n      const url = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${stocksymbol}&apikey=${key}`;\r\n      axios.get(url)\r\n      .then(res => {\r\n        const valuation = res.data['Time Series (Daily)'];\r\n        let dates = [];\r\n        let values = [];\r\n        for(let key in valuation) {\r\n          if ((start_date <= key) && (key <= end_date)) {\r\n            dates.push(key);\r\n            values.push(valuation[key]['4. close']);\r\n          }\r\n        }\r\n        // Remaking data of stocks for drawing graph\r\n        let element_datasets = {\r\n          label : stocksymbol,\r\n          data : values,\r\n          backgroundColor : '#'+(Math.random()*0xFFFFFF<<0).toString(16) + \"33\"\r\n        }\r\n\r\n        datasets.push(element_datasets);\r\n\r\n        this.setState({\r\n          data : {\r\n            labels : dates,\r\n            datasets : datasets\r\n          }\r\n        });\r\n      })\r\n      .catch(error => console.log(error));\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { params } = this.props.match;\r\n    const portfolio_index = params.index;\r\n\r\n    var portfolios = this.state.portfolios;\r\n\r\n    let stockCheckboxes = <div></div>;\r\n\r\n    var portfolio = null;\r\n    if (portfolios.length !== 0) {\r\n      portfolio = portfolios[portfolio_index];\r\n      const stocks = portfolio.stocks;\r\n      if (stocks.length !== 0) {\r\n        // Getting checkboxes of selected stocks\r\n        stockCheckboxes = stocks.map((stock, index) =>\r\n          <div key={index} style={{marginLeft:'30px'}}>\r\n            <input type=\"checkbox\" onChange={this.handleCheckboxChange} value={stock.stock_symbol} checked={this.state.selected_stocks.includes(stock.stock_symbol)}></input>\r\n            <Badge variant=\"light\"><h5>{stock.stock_symbol}</h5></Badge>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return(\r\n      <div className=\"container-div\">\r\n        <div>\r\n          <h3>{portfolio !== null ? portfolio.portfolio_name : 'Unknown Name'}</h3>\r\n        </div>\r\n        <Row>\r\n          <Col md={{ span: 9 }}>\r\n            <Line options={{ responsive:true }} data={ this.state.data }/>\r\n          </Col>\r\n          <Col md={{ span: 3 }} style={{marginTop : '70px'}}>\r\n            <h3>Stocks in {portfolio !== null ? portfolio.portfolio_name : 'Unknown Name'}</h3>\r\n            {stockCheckboxes}\r\n          </Col>\r\n        </Row>\r\n        <Row style={{ marginTop: '20px' }}>\r\n          <Col md={{ span: 2, offset: 1 }}>\r\n            <label><h5>Start Date</h5></label>\r\n            <input type=\"date\" onChange={this.handleDateChange} className=\"form-control\" name=\"start_date\" value={this.state.start_date}/>\r\n          </Col>\r\n          <Col md={{ span: 2, offset: 1 }}>\r\n            <label><h5>End Date</h5></label>\r\n            <input type=\"date\" onChange={this.handleDateChange} className=\"form-control\" name=\"end_date\" value={this.state.end_date}/>\r\n          </Col>\r\n          <Col md={{ span: 2, offset: 4 }}>\r\n            <Button variant=\"primary\" onClick={this.handleButtonClick} size=\"lg\">Update Graph</Button>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport NewPortfolio from './components/new_portfolio';\r\nimport NewStock from './components/new_stock';\r\nimport ViewGraph from './components/view_graph';\r\n\r\n// This is entry point of program. This file controls routing of program.\r\n// The url '/' is equivalent to App component.\r\n// The url '/' is equivalent to NewPortfolio component. This component is one for adding new portfolio.\r\n// The url '/' is equivalent to App component. This component is one for adding new stock. \r\n// The url '/' is equivalent to App component. This component is one for viewing graphs. \r\nconst routing = (\r\n\t\t<Router>\r\n\t\t\t<Route exact path='/' component={App}/>\t\r\n      <Route path='/portfolio/add' component={NewPortfolio}/> \r\n      <Route path='/stock/add/:index' component={NewStock}/>\r\n\t\t\t<Route path='/stock/viewgraph/:index' component={ViewGraph}/> \r\n\t\t</Router>\r\n\t);\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}